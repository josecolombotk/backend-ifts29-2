doctype html
html(lang='es')
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    title Gesti√≥n de M√©dicos
    style.
      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        color: #333;
      }
      .container {
        background: white;
        padding: 40px;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        backdrop-filter: blur(10px);
      }
      h1 {
        color: #4a5568;
        text-align: center;
        margin-bottom: 30px;
        font-size: 2.5em;
      }
      .back-button {
        display: inline-block;
        background: #718096;
        color: white;
        padding: 10px 20px;
        text-decoration: none;
        border-radius: 5px;
        margin-bottom: 20px;
        transition: background 0.3s ease;
      }
      .back-button:hover {
        background: #4a5568;
        color: white;
        text-decoration: none;
      }
      .actions {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin: 30px 0;
      }
      .action-button {
        display: block;
        padding: 20px;
        text-decoration: none;
        border-radius: 10px;
        text-align: center;
        font-weight: bold;
        font-size: 1.1em;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        color: white;
      }
      .action-button:hover {
        transform: translateY(-2px);
        color: white;
        text-decoration: none;
      }
      .create {
        background: linear-gradient(135deg, #48bb78, #38a169);
        box-shadow: 0 4px 15px rgba(72, 187, 120, 0.3);
      }
      .create:hover {
        box-shadow: 0 6px 20px rgba(72, 187, 120, 0.4);
      }
      .read {
        background: linear-gradient(135deg, #4299e1, #3182ce);
        box-shadow: 0 4px 15px rgba(66, 153, 225, 0.3);
      }
      .read:hover {
        box-shadow: 0 6px 20px rgba(66, 153, 225, 0.4);
      }
      .update {
        background: linear-gradient(135deg, #ed8936, #dd6b20);
        box-shadow: 0 4px 15px rgba(237, 137, 54, 0.3);
      }
      .update:hover {
        box-shadow: 0 6px 20px rgba(237, 137, 54, 0.4);
      }
      .delete {
        background: linear-gradient(135deg, #f56565, #e53e3e);
        box-shadow: 0 4px 15px rgba(245, 101, 101, 0.3);
      }
      .delete:hover {
        box-shadow: 0 6px 20px rgba(245, 101, 101, 0.4);
      }
      .icon {
        font-size: 2em;
        display: block;
        margin-bottom: 10px;
      }
      .form-section {
        background: #f7fafc;
        padding: 20px;
        border-radius: 10px;
        margin: 20px 0;
        display: none;
      }
      .form-section.active {
        display: block;
      }
      .form-group {
        margin-bottom: 15px;
      }
      .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        color: #2d3748;
      }
      .form-group input, .form-group select {
        width: 100%;
        padding: 10px;
        border: 1px solid #cbd5e0;
        border-radius: 5px;
        font-size: 16px;
      }
      .form-group input:focus, .form-group select:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
      }
      .submit-button {
        background: #667eea;
        color: white;
        padding: 12px 24px;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        transition: background 0.3s ease;
      }
      .submit-button:hover {
        background: #5a67d8;
      }
      .result {
        background: #edf2f7;
        padding: 15px;
        border-radius: 5px;
        margin-top: 15px;
        display: none;
      }
      .result.success {
        background: #f0fff4;
        border-left: 4px solid #48bb78;
      }
      .result.error {
        background: #fed7d7;
        border-left: 4px solid #f56565;
      }
  body
    .container
      a.back-button(href='/') ‚Üê Volver al Inicio
      
      h1 üë®‚Äç‚öïÔ∏è Gesti√≥n de M√©dicos
      
      .actions
        a.action-button.create(href='#' onclick='showForm("create")')
          span.icon ‚ûï
          | Crear M√©dico
        
        a.action-button.read(href='#' onclick='showForm("read")')
          span.icon üëÅÔ∏è
          | Consultar M√©dicos
        
        a.action-button.update(href='#' onclick='showForm("update")')
          span.icon ‚úèÔ∏è
          | Modificar M√©dico
        
        a.action-button.delete(href='#' onclick='showForm("delete")')
          span.icon üóëÔ∏è
          | Eliminar M√©dico
      
      // Formulario Crear M√©dico
      .form-section#create-form
        h3 ‚ûï Crear Nuevo M√©dico
        form(onsubmit='createMedico(event)')
          .form-group
            label(for='nombre') Nombre:
            input(type='text' id='nombre' name='Nombre' required)
          .form-group
            label(for='apellido') Apellido:
            input(type='text' id='apellido' name='Apellido' required)
          .form-group
            label(for='dni') DNI:
            input(type='text' id='dni' name='DNI' required)
          .form-group
            label(for='especialidad') Especialidad:
            select(id='especialidad' name='Especialidad' required)
              option(value='') Seleccionar...
              option(value='Cardiolog√≠a') Cardiolog√≠a
              option(value='Dermatolog√≠a') Dermatolog√≠a
              option(value='Traumatolog√≠a') Traumatolog√≠a
              option(value='Ginecolog√≠a') Ginecolog√≠a
              option(value='Pediatr√≠a') Pediatr√≠a
              option(value='Neurolog√≠a') Neurolog√≠a
              option(value='Oftalmolog√≠a') Oftalmolog√≠a
              option(value='Psiquiatr√≠a') Psiquiatr√≠a
              option(value='Medicina General') Medicina General
          button.submit-button(type='submit') Crear M√©dico
        .result#create-result
      
      // Formulario Consultar M√©dicos
      .form-section#read-form
        h3 üëÅÔ∏è Consultar M√©dicos
        button.submit-button(onclick='getAllMedicos()') Ver Todos los M√©dicos
        .form-group
          label(for='searchDni') Buscar por DNI:
          input(type='text' id='searchDni' name='searchDni' placeholder='Ingrese DNI')
          button.submit-button(onclick='getMedicoByDni()') Buscar
        .form-group
          label(for='searchEspecialidad') Buscar por Especialidad:
          select(id='searchEspecialidad' name='searchEspecialidad')
            option(value='') Seleccionar...
            option(value='Cardiolog√≠a') Cardiolog√≠a
            option(value='Dermatolog√≠a') Dermatolog√≠a
            option(value='Traumatolog√≠a') Traumatolog√≠a
            option(value='Ginecolog√≠a') Ginecolog√≠a
            option(value='Pediatr√≠a') Pediatr√≠a
            option(value='Neurolog√≠a') Neurolog√≠a
            option(value='Oftalmolog√≠a') Oftalmolog√≠a
            option(value='Psiquiatr√≠a') Psiquiatr√≠a
            option(value='Medicina General') Medicina General
          button.submit-button(onclick='getMedicosByEspecialidad()') Buscar
        .result#read-result
      
      // Formulario Modificar M√©dico
      .form-section#update-form
        h3 ‚úèÔ∏è Modificar M√©dico
        .form-group
          label(for='updateMedicoSelect') Seleccionar M√©dico:
          select(id='updateMedicoSelect' name='updateMedicoSelect' required)
            option(value='') Seleccionar m√©dico...
          button.submit-button(onclick='loadMedicoData()') Cargar Datos
        form(onsubmit='updateMedico(event)' style='display:none' id='update-data-form')
          .form-group
            label(for='updateNombre') Nombre:
            input(type='text' id='updateNombre' name='Nombre' required)
          .form-group
            label(for='updateApellido') Apellido:
            input(type='text' id='updateApellido' name='Apellido' required)
          .form-group
            label(for='updateDni') DNI:
            input(type='text' id='updateDni' name='DNI' required)
          .form-group
            label(for='updateEspecialidad') Especialidad:
            select(id='updateEspecialidad' name='Especialidad' required)
              option(value='Cardiolog√≠a') Cardiolog√≠a
              option(value='Dermatolog√≠a') Dermatolog√≠a
              option(value='Traumatolog√≠a') Traumatolog√≠a
              option(value='Ginecolog√≠a') Ginecolog√≠a
              option(value='Pediatr√≠a') Pediatr√≠a
              option(value='Neurolog√≠a') Neurolog√≠a
              option(value='Oftalmolog√≠a') Oftalmolog√≠a
              option(value='Psiquiatr√≠a') Psiquiatr√≠a
              option(value='Medicina General') Medicina General
          button.submit-button(type='submit') Actualizar M√©dico
        .result#update-result
      
  // Formulario Eliminar M√©dico
.form-section#delete-form
  h3 üóëÔ∏è Eliminar M√©dico
  .form-group
    label(for='deleteId') ID del M√©dico:
    // aceptar string hex de 24 chars (ObjectId)
    input(type='text' id='deleteId' name='deleteId' required maxlength='24' pattern='[0-9a-fA-F]{24}' placeholder='p.ej. 68f95856ca61e6b1d94f091c')
    button.submit-button(onclick='deleteMedico()') Eliminar M√©dico
  .result#delete-result


    script.
      function showForm(formType) {
        // Ocultar todos los formularios
        const forms = document.querySelectorAll('.form-section');
        forms.forEach(form => form.classList.remove('active'));
        
        // Mostrar el formulario seleccionado
        document.getElementById(formType + '-form').classList.add('active');
        
        // Cargar m√©dicos en el desplegable si es el formulario de modificar
        if (formType === 'update') {
          loadMedicosDropdown();
        }
        
        // Limpiar resultados
        const results = document.querySelectorAll('.result');
        results.forEach(result => {
          result.style.display = 'none';
          result.innerHTML = '';
        });
      }

      function showResult(elementId, message, isSuccess = true) {
        const result = document.getElementById(elementId);
        result.innerHTML = message;
        result.className = 'result ' + (isSuccess ? 'success' : 'error');
        result.style.display = 'block';
      }

      async function createMedico(event) {
        event.preventDefault();
        const formData = new FormData(event.target);
        
        // Construir el objeto con los nombres de par√°metros correctos
        const data = {
          Nombre: formData.get('Nombre'),
          Apellido: formData.get('Apellido'),
          DNI: formData.get('DNI'),
          Especialidad: formData.get('Especialidad')
        };
        
        try {
          const response = await fetch('/api/medicos', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });
          
          const result = await response.json();
          if (response.ok) {
            showResult('create-result', `‚úÖ M√©dico creado exitosamente. ID: ${result.data.IdMedico}`, true);
            event.target.reset();
          } else {
            showResult('create-result', `‚ùå Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('create-result', `‚ùå Error de conexi√≥n: ${error.message}`, false);
        }
      }

      async function getAllMedicos() {
        try {
          const response = await fetch('/api/medicos');
          const result = await response.json();
          
          if (response.ok) {
            let html = '<h4>üìã Lista de M√©dicos:</h4>';
            result.data.forEach(medico => {
              html += `<p><strong>ID:</strong> ${medico.IdMedico} | <strong>Nombre:</strong> ${medico.Nombre} ${medico.Apellido} | <strong>DNI:</strong> ${medico.DNI} | <strong>Especialidad:</strong> ${medico.Especialidad}</p>`;
            });
            showResult('read-result', html, true);
          } else {
            showResult('read-result', `‚ùå Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('read-result', `‚ùå Error de conexi√≥n: ${error.message}`, false);
        }
      }

      async function getMedicoByDni() {
        const dni = document.getElementById('searchDni').value;
        if (!dni) {
          showResult('read-result', '‚ùå Por favor ingrese un DNI', false);
          return;
        }
        
        try {
          const response = await fetch(`/api/medicos/dni/${dni}`);
          const result = await response.json();
          
          if (response.ok) {
            const m = result.data;
            const html = `<h4>üë®‚Äç‚öïÔ∏è M√©dico Encontrado:</h4>
                         <p><strong>ID:</strong> ${m.IdMedico}</p>
                         <p><strong>Nombre:</strong> ${m.Nombre} ${m.Apellido}</p>
                         <p><strong>DNI:</strong> ${m.DNI}</p>
                         <p><strong>Especialidad:</strong> ${m.Especialidad}</p>`;
            showResult('read-result', html, true);
          } else {
            showResult('read-result', `‚ùå Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('read-result', `‚ùå Error de conexi√≥n: ${error.message}`, false);
        }
      }

      async function getMedicosByEspecialidad() {
        const especialidad = document.getElementById('searchEspecialidad').value;
        if (!especialidad) {
          showResult('read-result', '‚ùå Por favor seleccione una especialidad', false);
          return;
        }
        
        try {
          const response = await fetch(`/api/medicos/especialidad/${especialidad}`);
          const result = await response.json();
          
          if (response.ok) {
            let html = `<h4>üë®‚Äç‚öïÔ∏è M√©dicos de ${especialidad}:</h4>`;
            result.data.forEach(medico => {
              html += `<p><strong>ID:</strong> ${medico.IdMedico} | <strong>Nombre:</strong> ${medico.Nombre} ${medico.Apellido} | <strong>DNI:</strong> ${medico.DNI}</p>`;
            });
            showResult('read-result', html, true);
          } else {
            showResult('read-result', `‚ùå Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('read-result', `‚ùå Error de conexi√≥n: ${error.message}`, false);
        }
      }

      async function loadMedicosDropdown() {
        try {
          const response = await fetch('/api/medicos');
          const result = await response.json();
          
          if (response.ok) {
            const select = document.getElementById('updateMedicoSelect');
            select.innerHTML = '<option value="">Seleccionar m√©dico...</option>';
            
            result.data.forEach(medico => {
              const option = document.createElement('option');
              option.value = medico.IdMedico;
              option.textContent = `${medico.Nombre} ${medico.Apellido} - DNI: ${medico.DNI}`;
              select.appendChild(option);
            });
          }
        } catch (error) {
          console.error('Error cargando m√©dicos:', error);
        }
      }

      async function loadMedicoData() {
        const id = document.getElementById('updateMedicoSelect').value;
        if (!id) {
          showResult('update-result', '‚ùå Por favor seleccione un m√©dico', false);
          return;
        }
        
        try {
          const response = await fetch(`/api/medicos/${id}`);
          const result = await response.json();
          
          if (response.ok) {
            const m = result.data;
            document.getElementById('updateNombre').value = m.Nombre;
            document.getElementById('updateApellido').value = m.Apellido;
            document.getElementById('updateDni').value = m.DNI;
            document.getElementById('updateEspecialidad').value = m.Especialidad;
            
            document.getElementById('update-data-form').style.display = 'block';
            showResult('update-result', '‚úÖ Datos cargados correctamente', true);
          } else {
            showResult('update-result', `‚ùå Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('update-result', `‚ùå Error de conexi√≥n: ${error.message}`, false);
        }
      }

      async function updateMedico(event) {
        event.preventDefault();
        const id = document.getElementById('updateMedicoSelect').value;
        const formData = new FormData(event.target);
        
        // Construir el objeto con los nombres de par√°metros correctos
        const data = {
          Nombre: formData.get('Nombre'),
          Apellido: formData.get('Apellido'),
          DNI: formData.get('DNI'),
          Especialidad: formData.get('Especialidad')
        };
        
        try {
          const response = await fetch(`/api/medicos/${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });
          
          const result = await response.json();
          if (response.ok) {
            showResult('update-result', '‚úÖ M√©dico actualizado exitosamente', true);
          } else {
            showResult('update-result', `‚ùå Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('update-result', `‚ùå Error de conexi√≥n: ${error.message}`, false);
        }
      }

      async function deleteMedico() {
        const id = document.getElementById('deleteId').value;
        if (!id) {
          showResult('delete-result', '‚ùå Por favor ingrese un ID', false);
          return;
        }
        
        if (!confirm('¬øEst√° seguro de que desea eliminar este m√©dico?')) {
          return;
        }
        
        try {
          const response = await fetch(`/api/medicos/${id}`, {
            method: 'DELETE'
          });
          
          const result = await response.json();
          if (response.ok) {
            showResult('delete-result', '‚úÖ M√©dico eliminado exitosamente', true);
            document.getElementById('deleteId').value = '';
          } else {
            showResult('delete-result', `‚ùå Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('delete-result', `‚ùå Error de conexi√≥n: ${error.message}`, false);
        }
      }