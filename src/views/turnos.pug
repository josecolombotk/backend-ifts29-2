doctype html
html(lang='es')
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    title Gesti√≥n de Turnos
    style.
      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%);
        color: #333;
        margin: 0;
        padding: 20px;
      }
      .container {
        background: white;
        padding: 30px;
        border-radius: 12px;
        max-width: 900px;
        margin: auto;
        box-shadow: 0 10px 25px rgba(0,0,0,0.15);
      }
      h1 { text-align: center; color: #2b6cb0; }
      .buttons { display: flex; flex-wrap: wrap; gap: 10px; justify-content: center; margin-bottom: 20px; }
      .btn {
        padding: 10px 20px; border-radius: 6px;
        color: white; text-decoration: none; font-weight: bold;
      }
      .create { background: #38a169; }
      .read { background: #3182ce; }
      .update { background: #dd6b20; }
      .delete { background: #e53e3e; }
      form {
        display: flex; flex-direction: column;
        gap: 10px; margin-top: 10px;
      }
      input, select {
        padding: 8px;
        border-radius: 6px;
        border: 1px solid #ccc;
      }
      .submit-button {
        background: #2b6cb0;
        color: white;
        padding: 8px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
      }
      .result { margin-top: 10px; padding: 10px; border-radius: 6px; display: none; }
      .result.success { background: #f0fff4; border-left: 5px solid #48bb78; }
      .result.error { background: #fff5f5; border-left: 5px solid #e53e3e; }

  body
    .container
      h1 ü©∫ Gesti√≥n de Turnos

      .buttons
        a.btn.create(href='#' onclick='showForm("create")') ‚ûï Crear Turno
        a.btn.read(href='#' onclick='showForm("read")') üëÅÔ∏è Ver Turnos
        a.btn.update(href='#' onclick='showForm("update")') ‚úèÔ∏è Modificar Turno
        a.btn.delete(href='#' onclick='showForm("delete")') üóëÔ∏è Eliminar Turno

      // Crear
      .form#create-form
        h3 ‚ûï Crear Turno
        form(onsubmit='createTurno(event)')
          label Fecha:
          input(type='date' name='Fecha' required)
          label Hora:
          input(type='time' name='Hora' required)
          label Motivo:
          input(type='text' name='Motivo')
          label Estado:
          select(name='Estado')
            option(value='pendiente') pendiente
            option(value='confirmado') confirmado
            option(value='cancelado') cancelado
          label ID Paciente:
          input(type='text' name='Paciente' placeholder='ObjectId del Paciente' required)
          label ID M√©dico:
          input(type='text' name='Medico' placeholder='ObjectId del M√©dico' required)
          button.submit-button(type='submit') Crear Turno
        .result#create-result

      // Leer
      .form#read-form(style='display:none')
        h3 üëÅÔ∏è Ver Todos los Turnos
        button.submit-button(type='button' onclick='getAllTurnos()') Cargar Turnos
        .result#read-result

      // Actualizar
      .form#update-form(style='display:none')
        h3 ‚úèÔ∏è Modificar Turno
        label ID del Turno:
        input(type='text' id='updateId' required)
        button.submit-button(type='button' onclick='loadTurnoData()') Cargar Datos

        form(onsubmit='updateTurno(event)' id='update-data-form' style='display:none')
          label Fecha:
          input(type='date' id='updateFecha' name='Fecha')
          label Hora:
          input(type='time' id='updateHora' name='Hora')
          label Motivo:
          input(type='text' id='updateMotivo' name='Motivo')
          label Estado:
          select(id='updateEstado' name='Estado')
            option(value='pendiente') pendiente
            option(value='confirmado') confirmado
            option(value='cancelado') cancelado
          label ID Paciente:
          input(type='text' id='updatePaciente' name='Paciente')
          label ID M√©dico:
          input(type='text' id='updateMedico' name='Medico')
          button.submit-button(type='submit') Actualizar Turno
        .result#update-result

      // Eliminar
      .form#delete-form(style='display:none')
        h3 üóëÔ∏è Eliminar Turno
        label ID del Turno:
        input(type='text' id='deleteId' required)
        button.submit-button(type='button' onclick='deleteTurno()') Eliminar
        .result#delete-result

    script.
      function showForm(type) {
        document.querySelectorAll('.form').forEach(f => f.style.display = 'none');
        document.getElementById(type + '-form').style.display = 'block';
      }

      function showResult(id, msg, ok = true) {
        const el = document.getElementById(id);
        el.innerHTML = msg;
        el.style.display = 'block';
        el.className = 'result ' + (ok ? 'success' : 'error');
      }

      // CREATE
      async function createTurno(e) {
        e.preventDefault();
        const data = Object.fromEntries(new FormData(e.target));
        try {
          const res = await fetch('/api/turnos', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });
          const json = await res.json();
          if (res.ok) showResult('create-result', '‚úÖ Turno creado con √©xito');
          else showResult('create-result', '‚ùå ' + json.message, false);
        } catch (err) { showResult('create-result', '‚ùå Error: ' + err.message, false); }
      }

      // READ
      async function getAllTurnos() {
        try {
          const res = await fetch('/api/turnos');
          const json = await res.json();
          if (res.ok) {
            let html = '<ul>';
            json.data.forEach(t => {
              html += `<li><strong>${t.Medico?.Nombre || t.Medico}</strong> ‚Äì ${t.Fecha?.slice(0,10)} ${t.Hora} ‚Äî ${t.Estado}</li>`;
            });
            html += '</ul>';
            showResult('read-result', html);
          } else showResult('read-result', '‚ùå ' + json.message, false);
        } catch (err) { showResult('read-result', '‚ùå ' + err.message, false); }
      }

      // LOAD TURN FOR UPDATE
      async function loadTurnoData() {
        const id = document.getElementById('updateId').value;
        if (!id) return showResult('update-result', '‚ùå Ingrese un ID', false);
        try {
          const res = await fetch(`/api/turnos/${id}`);
          const json = await res.json();
          if (res.ok) {
            const t = json.data;
            document.getElementById('updateFecha').value = t.Fecha?.slice(0,10);
            document.getElementById('updateHora').value = t.Hora;
            document.getElementById('updateMotivo').value = t.Motivo;
            document.getElementById('updateEstado').value = t.Estado;
            document.getElementById('updatePaciente').value = t.Paciente?._id || t.Paciente;
            document.getElementById('updateMedico').value = t.Medico?._id || t.Medico;
            document.getElementById('update-data-form').style.display = 'block';
            showResult('update-result', '‚úÖ Datos cargados correctamente');
          } else showResult('update-result', '‚ùå ' + json.message, false);
        } catch (err) { showResult('update-result', '‚ùå ' + err.message, false); }
      }

      // UPDATE
      async function updateTurno(e) {
        e.preventDefault();
        const id = document.getElementById('updateId').value;
        const data = Object.fromEntries(new FormData(e.target));
        try {
          const res = await fetch(`/api/turnos/${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });
          const json = await res.json();
          if (res.ok) showResult('update-result', '‚úÖ Turno actualizado correctamente');
          else showResult('update-result', '‚ùå ' + json.message, false);
        } catch (err) { showResult('update-result', '‚ùå ' + err.message, false); }
      }

      // DELETE
      async function deleteTurno() {
        const id = document.getElementById('deleteId').value;
        if (!id) return showResult('delete-result', '‚ùå Ingrese un ID', false);
        if (!confirm('¬øEliminar este turno?')) return;
        try {
          const res = await fetch(`/api/turnos/${id}`, { method: 'DELETE' });
          const json = await res.json();
          if (res.ok) showResult('delete-result', '‚úÖ Turno eliminado');
          else showResult('delete-result', '‚ùå ' + json.message, false);
        } catch (err) { showResult('delete-result', '‚ùå ' + err.message, false); }
      }
