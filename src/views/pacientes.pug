doctype html
html(lang='es')
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    title Gesti√≥n de Pacientes
    style.
      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        color: #333;
      }
      .container {
        background: white;
        padding: 40px;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        backdrop-filter: blur(10px);
      }
      h1 {
        color: #4a5568;
        text-align: center;
        margin-bottom: 30px;
        font-size: 2.5em;
      }
      .back-button {
        display: inline-block;
        background: #718096;
        color: white;
        padding: 10px 20px;
        text-decoration: none;
        border-radius: 5px;
        margin-bottom: 20px;
        transition: background 0.3s ease;
      }
      .back-button:hover {
        background: #4a5568;
      }
      .actions {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin: 30px 0;
      }
      .action-button {
        display: block;
        padding: 20px;
        text-decoration: none;
        border-radius: 10px;
        text-align: center;
        font-weight: bold;
        font-size: 1.1em;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        color: white;
      }
      .action-button:hover {
        transform: translateY(-2px);
      }
      .create { background: linear-gradient(135deg, #48bb78, #38a169); }
      .read { background: linear-gradient(135deg, #4299e1, #3182ce); }
      .update { background: linear-gradient(135deg, #ed8936, #dd6b20); }
      .delete { background: linear-gradient(135deg, #f56565, #e53e3e); }
      .icon { font-size: 2em; display: block; margin-bottom: 10px; }
      .form-section { background: #f7fafc; padding: 20px; border-radius: 10px; margin: 20px 0; display: none; }
      .form-section.active { display: block; }
      .form-group { margin-bottom: 15px; }
      .form-group label { display: block; margin-bottom: 5px; font-weight: bold; color: #2d3748; }
      .form-group input, .form-group select { width: 100%; padding: 10px; border: 1px solid #cbd5e0; border-radius: 5px; font-size: 16px; }
      .form-group input:focus, .form-group select:focus { outline: none; border-color: #667eea; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1); }
      .submit-button { background: #667eea; color: white; padding: 12px 24px; border: none; border-radius: 5px; font-size: 16px; cursor: pointer; transition: background 0.3s ease; }
      .submit-button:hover { background: #5a67d8; }
      .result { background: #edf2f7; padding: 15px; border-radius: 5px; margin-top: 15px; display: none; }
      .result.success { background: #f0fff4; border-left: 4px solid #48bb78; }
      .result.error { background: #fed7d7; border-left: 4px solid #f56565; }

  body
    .container
      a.back-button(href='/') ‚Üê Volver al Inicio
      h1 üè• Gesti√≥n de Pacientes

      .actions
        a.action-button.create(href='#', onclick='showForm("create")')
          span.icon ‚ûï
          | Crear Paciente
        a.action-button.read(href='#', onclick='showForm("read")')
          span.icon üëÅÔ∏è
          | Consultar Pacientes
        a.action-button.update(href='#', onclick='showForm("update")')
          span.icon ‚úèÔ∏è
          | Modificar Paciente
        a.action-button.delete(href='#', onclick='showForm("delete")')
          span.icon üóëÔ∏è
          | Eliminar Paciente

      // Crear
      .form-section#create-form
        h3 ‚ûï Crear Nuevo Paciente
        form(onsubmit='createPaciente(event)')
          .form-group
            label(for='nombre') Nombre:
            input(type='text', id='nombre', name='nombre', required)
          .form-group
            label(for='apellido') Apellido:
            input(type='text', id='apellido', name='apellido', required)
          .form-group
            label(for='dni') DNI:
            input(type='text', id='dni', name='dni', required)
          .form-group
            label(for='edad') Edad:
            input(type='number', id='edad', name='edad', required, min='0', max='120')
          .form-group
            label(for='sexo') Sexo:
            select(id='sexo', name='sexo', required)
              option(value='') Seleccionar...
              option(value='M') Masculino
              option(value='F') Femenino
          .form-group
            label(for='obraSocial') Obra Social:
            input(type='text', id='obraSocial', name='obraSocial', required)
          .form-group
            label(for='nroAfiliado') N√∫mero de Afiliado:
            input(type='text', id='nroAfiliado', name='nroAfiliado', required)
          button.submit-button(type='submit') Crear Paciente
        .result#create-result

      // Consultar
      .form-section#read-form
        h3 üëÅÔ∏è Consultar Pacientes
        button.submit-button(onclick='getAllPacientes()') Ver Todos los Pacientes
        .form-group
          label(for='searchDni') Buscar por DNI:
          input(type='text', id='searchDni', name='searchDni', placeholder='Ingrese DNI')
          button.submit-button(onclick='getPacienteByDni()') Buscar
        .result#read-result

      // Modificar
      .form-section#update-form
        h3 ‚úèÔ∏è Modificar Paciente
        .form-group
          label(for='updatePacienteSelect') Seleccionar Paciente:
          select(id='updatePacienteSelect', name='updatePacienteSelect', required)
            option(value='') Seleccionar paciente...
          button.submit-button(onclick='loadPacienteData()') Cargar Datos
        form(onsubmit='updatePaciente(event)', style='display:none', id='update-data-form')
          .form-group
            label(for='updateNombre') Nombre:
            input(type='text', id='updateNombre', name='updateNombre', required)
          .form-group
            label(for='updateApellido') Apellido:
            input(type='text', id='updateApellido', name='updateApellido', required)
          .form-group
            label(for='updateDni') DNI:
            input(type='text', id='updateDni', name='updateDni', required)
          .form-group
            label(for='updateEdad') Edad:
            input(type='number', id='updateEdad', name='updateEdad', required, min='0', max='120')
          .form-group
            label(for='updateSexo') Sexo:
            select(id='updateSexo', name='updateSexo', required)
              option(value='') Seleccionar...
              option(value='M') Masculino
              option(value='F') Femenino
          .form-group
            label(for='updateObraSocial') Obra Social:
            input(type='text', id='updateObraSocial', name='updateObraSocial', required)
          .form-group
            label(for='updateNroAfiliado') N√∫mero de Afiliado:
            input(type='text', id='updateNroAfiliado', name='updateNroAfiliado', required)
          button.submit-button(type='submit') Actualizar Paciente
        .result#update-result

      // Eliminar
      .form-section#delete-form
        h3 üóëÔ∏è Eliminar Paciente
        .form-group
          label(for='deleteId') ID del Paciente:
          input(type='text', id='deleteId', name='deleteId', required)
          button.submit-button(onclick='deletePaciente()') Eliminar Paciente
        .result#delete-result

    script.
      function showForm(formType) {
        const forms = document.querySelectorAll('.form-section');
        forms.forEach(f => f.classList.remove('active'));
        document.getElementById(formType + '-form').classList.add('active');
        if (formType === 'update') loadPacientesDropdown();
        const results = document.querySelectorAll('.result');
        results.forEach(r => { r.style.display='none'; r.innerHTML=''; });
      }

      function showResult(elementId, message, isSuccess=true) {
        const result = document.getElementById(elementId);
        result.innerHTML = message;
        result.className = 'result ' + (isSuccess ? 'success' : 'error');
        result.style.display='block';
      }

      async function createPaciente(event) {
        event.preventDefault();
        const fd = new FormData(event.target);
        const data = {
          Nombre: fd.get('nombre'),
          Apellido: fd.get('apellido'),
          DNI: fd.get('dni'),
          Edad: Number(fd.get('edad')),
          Sexo: fd.get('sexo'),
          ObraSocial: fd.get('obraSocial'),
          NroAfiliado: fd.get('nroAfiliado')
        };
        try {
          const res = await fetch('/api/pacientes', {
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify(data)
          });
          const result = await res.json();
          if(res.ok){
            showResult('create-result', `‚úÖ Paciente creado exitosamente. ID: ${result.data.IdPaciente}`);
            event.target.reset();
          } else showResult('create-result', `‚ùå Error: ${result.message}`, false);
        } catch(err){ showResult('create-result', `‚ùå Error de conexi√≥n: ${err.message}`, false); }
      }

      async function getAllPacientes() {
        try {
          const res = await fetch('/api/pacientes');
          const result = await res.json();
          if(res.ok){
            let html='<h4>üìã Lista de Pacientes:</h4>';
            result.data.forEach(p=>{
              html+=`<p><strong>ID:</strong> ${p.IdPaciente} | <strong>Nombre:</strong> ${p.Nombre} ${p.Apellido} | <strong>DNI:</strong> ${p.DNI} | <strong>Obra Social:</strong> ${p.ObraSocial}</p>`;
            });
            showResult('read-result', html);
          } else showResult('read-result', `‚ùå Error: ${result.message}`, false);
        } catch(err){ showResult('read-result', `‚ùå Error de conexi√≥n: ${err.message}`, false); }
      }

      async function getPacienteByDni() {
        const dni=document.getElementById('searchDni').value;
        if(!dni){ showResult('read-result','‚ùå Por favor ingrese un DNI',false); return; }
        try {
          const res=await fetch(`/api/pacientes/dni/${dni}`);
          const result=await res.json();
          if(res.ok){
            const p=result.data;
            const html=`<h4>üë§ Paciente Encontrado:</h4>
              <p><strong>ID:</strong> ${p.IdPaciente}</p>
              <p><strong>Nombre:</strong> ${p.Nombre}</p>
              <p><strong>Apellido:</strong> ${p.Apellido}</p>
              <p><strong>DNI:</strong> ${p.DNI}</p>
              <p><strong>Edad:</strong> ${p.Edad || '-'}</p>
              <p><strong>Sexo:</strong> ${p.Sexo || '-'}</p>
              <p><strong>Obra Social:</strong> ${p.ObraSocial || '-'}</p>
              <p><strong>Nro. Afiliado:</strong> ${p.NroAfiliado || '-'}</p>`;
            showResult('read-result', html,true);
          } else showResult('read-result', `‚ùå Error: ${result.message}`, false);
        } catch(err){ showResult('read-result', `‚ùå Error de conexi√≥n: ${err.message}`, false); }
      }

      async function loadPacientesDropdown() {
        try {
          const res=await fetch('/api/pacientes');
          const result=await res.json();
          if(res.ok){
            const select=document.getElementById('updatePacienteSelect');
            select.innerHTML='<option value="">Seleccionar paciente...</option>';
            result.data.forEach(p=>{
              const option=document.createElement('option');
              option.value=p.IdPaciente;
              option.textContent=`${p.Nombre} ${p.Apellido} - DNI: ${p.DNI}`;
              select.appendChild(option);
            });
          }
        } catch(err){ console.error('Error cargando pacientes:', err); }
      }

      async function loadPacienteData() {
        const id=document.getElementById('updatePacienteSelect').value;
        if(!id){ showResult('update-result','‚ùå Por favor seleccione un paciente',false); return; }
        try {
          const res=await fetch(`/api/pacientes/${id}`);
          const result=await res.json();
          if(res.ok){
            const p=result.data;
            document.getElementById('updateNombre').value=p.Nombre;
            document.getElementById('updateApellido').value=p.Apellido;
            document.getElementById('updateDni').value=p.DNI;
            document.getElementById('updateEdad').value=p.Edad;
            document.getElementById('updateSexo').value=p.Sexo;
            document.getElementById('updateObraSocial').value=p.ObraSocial;
            document.getElementById('updateNroAfiliado').value=p.NroAfiliado;
            document.getElementById('update-data-form').style.display='block';
            showResult('update-result','‚úÖ Datos cargados correctamente',true);
          } else showResult('update-result', `‚ùå Error: ${result.message}`, false);
        } catch(err){ showResult('update-result', `‚ùå Error de conexi√≥n: ${err.message}`, false); }
      }

      async function updatePaciente(event) {
        event.preventDefault();
        const id=document.getElementById('updatePacienteSelect').value;
        const fd=new FormData(event.target);
        const data={
          Nombre: fd.get('updateNombre'),
          Apellido: fd.get('updateApellido'),
          DNI: fd.get('updateDni'),
          Edad: Number(fd.get('updateEdad')),
          Sexo: fd.get('updateSexo'),
          ObraSocial: fd.get('updateObraSocial'),
          NroAfiliado: fd.get('updateNroAfiliado')
        };
        try {
          const res=await fetch(`/api/pacientes/${id}`,{
            method:'PUT',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify(data)
          });
          const result=await res.json();
          if(res.ok) showResult('update-result','‚úÖ Paciente actualizado exitosamente',true);
          else showResult('update-result',`‚ùå Error: ${result.message}`,false);
        } catch(err){ showResult('update-result',`‚ùå Error de conexi√≥n: ${err.message}`,false);}
      }

      async function deletePaciente() {
        const id=document.getElementById('deleteId').value;
        if(!id){ showResult('delete-result','‚ùå Por favor ingrese un ID',false); return; }
        if(!confirm('¬øEst√° seguro de que desea eliminar este paciente?')) return;
        try {
          const res=await fetch(`/api/pacientes/${id}`,{ method:'DELETE' });
          const result=await res.json();
          if(res.ok){
            showResult('delete-result','‚úÖ Paciente eliminado exitosamente',true);
            document.getElementById('deleteId').value='';
          } else showResult('delete-result',`‚ùå Error: ${result.message}`,false);
        } catch(err){ showResult('delete-result',`‚ùå Error de conexi√≥n: ${err.message}`,false);}
      }
